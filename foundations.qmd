# Foundations {#sec-foundations}

```{r source_r, echo = FALSE}
source("_common.R")
```

## Goals and Outcomes

* Understand fundamental spatial data structures and libraries in R.
* Become familiar with coordinate reference systems.
* Perform some fundamental spatial operations in R.
* Geographic I/O

We'll start by installing and loading some of the primary libraries for working with spatial data in R and examining spatial data structures in R.

## Geographic Data Structures in R

::: {.callout-important icon="false"}
## Exercise

Plot the `iris` data
:::

::: {.callout-important icon="false" collapse="true"}
## Solution

```{r}
plot(iris)
```
:::
### Vector data

### Raster data

## Coordinate reference systems and projections

## Spatial operations

## Geographic data I/O

## R Code Appendix

```{r get-labels, echo = FALSE}
labs = knitr::all_labels()
labs = setdiff(labs, c("source_r", "get-labels"))
```

```{r all-code, ref.label=labs, eval = FALSE}
```

## Geographic Data in R

:::{.callout-note}
A few core libraries underpin spatial libraries in R (and Python!) and in software applications(QGIS, ArcPro) and spatial data structures across languages and applications is primarily organized through [OSgeo](https://www.osgeo.org) and [OGC](https://www.ogc.org)). These core libraries include:
-   **PROJ** --\> Spatial projections, transformations

-   **GEOS** --\> Geometry operations (measures, relations)

-   **GDAL** --\> Raster and feature abstraction and processing (read, write)

-   **NetCDF** --\> Multidimensional (XYZT) data abstraction (read, write)
:::

### Spatial Data in R

### Coordinate Reference Systems

### Vector

### Raster

### Geographic Data I/O


